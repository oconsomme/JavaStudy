package member;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Scanner;

public class Main {

	@SuppressWarnings("resource")
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		// CRUD -> Create/Read/Update/Delete -> 어떠한 프로그램이든 기본적으로 존재해야하는 기능들
		while(true) {
			System.out.print("1.회원가입 2.로그인 3.회원목록 4.회원정보수정 5.회원탈퇴 6.종료 >> ");
			int menu = sc.nextInt();
		
			if (menu == 1) {
				System.out.println("=======회원가입=======");
				// 아이디, 비밀번호, 닉네임
				System.out.print("아이디 입력 : ");
				String id = sc.next();
				System.out.print("비밀번호 입력 : ");
				String pw = sc.next();
				System.out.print("닉네임 입력 : ");
				String nick= sc.next();
				
				// 예외사항 발생
				// 이유 : 오타가 있거나 파일이 존재하지 않을 때
				//		 클래스를 못찾는 예외사항이 발생한다
				// 예외사항 해결방법 - try - catch
				// try에 예외사항이 발생할 만한 코드를 작성
				// catch 해당 예외사항이 발생하면 오류를 감지 및 포착
				int cnt = 0;
				Connection conn = null;
				PreparedStatement psmt = null;
				
				// 0. 드라이버 파일을 프로젝트 안에 넣어주기
				try {
					// 1. 드라이버 설치 (동적로딩)
					// 왜 동적로딩인가
					// - 컴파일러는 아래의 코드를 만나기 전까지 어떠한 DBMS에 
					// 드라이벌르 사용하는지 모르고 아래의 코드를 만나는 순간
					// 해당 드라이버를 찾아서 설치를 한다.
					Class.forName("oracle.jdbc.driver.OracleDriver");
					
					// 2. 커넥션 열기
					// - DB가 존재하는 url, 아이디, 비밀번호
					String db_url = "jdbc:oracle:thin:@localhost:1521:xe";
					String db_id = "shopping";
					String db_pw = "12345";
					
					conn = DriverManager.getConnection(db_url, db_id, db_pw);
					
					if (conn != null) {
						System.out.println("DB연결 성공");
					} else {
						System.out.println("DB연결 실패");
					}
					
					// 3. SQL문 실행
					// SQL문을 실행하기 위해서는 조건이 있다.
					// 1. SQL문장이 이상없는지 검토를 받아야한다
					String sql = "INSERT INTO MEMBER VALUES(?,?,?)";
					psmt = conn.prepareStatement(sql);
					
					// psmt객체가 sql문을 완성하고 실행할 수 있는 객체이다 
					psmt.setString(1, id);
					psmt.setString(2, pw);
					psmt.setString(3, nick);
					
					// executeUpdate(); sql 문장을 실행하는 메소드
					// 실행한 문장의 개수를 int 형태로 반환ㄴㄴㄴㄴ
					cnt = psmt.executeUpdate();
					
				} catch (ClassNotFoundException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} finally {
					// try가 잘 실행되거나
					// 또는 중간에 catch로 넘어간다고 하더라도
					// finally에는 마지막에 반드시 넘어오게 되어있다.
					// 4. 연결끊기
					// - 연결을 끊을때는 역순으로 끊어준다
					try {
						if (psmt != null) {
							psmt.close();
						}
						if (conn != null) {
							conn.close();
						}
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
				if (cnt > 0) {
						System.out.println("회원가입 성공!");
					}else {
						System.out.println("회원가입 실패");
					}
							
			}else if (menu == 2) { 
				System.out.print("아이디 >> ");
				String id = sc.next();
				System.out.print("비밀번호 >> ");
				String pw = sc.next();
								
				
				// 로그인
				// 사용자한테 아이디랑 비밀번호 입력받아서
				// 테이블에 해당 데이터가 있는지 확인 후
				// 있으면 닉네임 가져와서
				// "자연보호님 로그인 성공하셨습니다!"
				int cnt = 0;
				Connection conn = null;
				PreparedStatement psmt = null;
				ResultSet rs = null;
				
				// 1. 데이터베이스 동적로딩
				try {
					Class.forName("oracle.jdbc.driver.OracleDriver");
					
					// - DB가 존재하는 url, 아이디, 비밀번호
					String db_url = "jdbc:oracle:thin:@localhost:1521:xe";
					String db_id = "shopping";
					String db_pw = "12345";
						
					// 권한 가져오기
					try {
						conn = DriverManager.getConnection(db_url, db_id, db_pw);
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					
					// select
					String sql = "SELECT * FROM MEMBER WHERE (ID = ? AND PW = ?)";
					psmt = conn.prepareStatement(sql);

					// psmt객체가 sql문을 완성하고 실행할 수 있는 객체이다 
					psmt.setString(1, id);
					psmt.setString(2, pw);
					
					// executeUpdate(); sql 문장을 실행하는 메소드
					// 실행한 문장의 개수를 int 형태로 반환
					cnt = psmt.executeUpdate();
					
					try {
						psmt = conn.prepareStatement(sql);
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					
					// ResultSet = sql select문을 실행시 돌아오는 테이블 형태를
					// 담을 수 있는 객체
					
					try {
						rs = psmt.executeQuery();
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					
					try {
							String loginId = rs.getString(1);
							System.out.println(loginId+"님 로그인 성공하셨습니다!");
				
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				
				} catch (ClassNotFoundException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (SQLException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				} finally {
					// 역수로 자원을 반납
					// ResultSet
					try {
						if (rs != null)
							rs.close();
						if(psmt != null)
							psmt.close();
						if(conn != null)
							conn.close();
					}catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
					// PreparedStatement
					// Connection
					}
				}
				
				
			}else if (menu == 3) {
				
				// 전체 회원의 정보가 보여지게 만들자
				// 아이디		비밀번호		닉네임
				// --------------------------
				//  a		  a			  a
				//  b		  b 		  b
				
				Connection conn = null;
				PreparedStatement psmt = null;
				ResultSet rs = null;
				// 1. 데이터베이스 동적로딩
				try {
					Class.forName("oracle.jdbc.driver.OracleDriver");
					
					// - DB가 존재하는 url, 아이디, 비밀번호
					String db_url = "jdbc:oracle:thin:@localhost:1521:xe";
					String db_id = "shopping";
					String db_pw = "12345";
						
					// 권한 가져오기
					try {
						conn = DriverManager.getConnection(db_url, db_id, db_pw);
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					
					// select
					String sql = "SELECT * FROM MEMBER";
					
					try {
						psmt = conn.prepareStatement(sql);
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					
					// ResultSet = sql select문을 실행시 돌아오는 테이블 형태를
					// 담을 수 있는 객체
					
					try {
						rs = psmt.executeQuery();
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					
					try {
						System.out.println("아이디\t비밀번호\t닉네임");
						System.out.println("======================================");
						while(rs.next()) {
							String id = rs.getString(1);
							String pw = rs.getString(2);
							String nick = rs.getString(3);
							System.out.println(id+"\t"+pw+"\t"+nick);
						}
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				
				} catch (ClassNotFoundException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} finally {
					// 역수로 자원을 반납
					// ResultSet
					try {
						if (rs != null)
							rs.close();
						if(psmt != null)
							psmt.close();
						if(conn != null)
							conn.close();
					}catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
					// PreparedStatement
					// Connection
					}
				}
				
			}else if (menu == 4) {
				
				// 회원정보 수정
				// 사용자로부터 아이디를 입력받아서 비밀번호를 바꿈
//				System.out.print("비밀번호를 바꾸고 싶은 아이디 입력 >> ");
//				String id = sc.next();
				
				// Query
				// Update 테이블명 set 컬럼명 조건문
				// 조건문 : 사용자가 입력한 아이디에 해당하는 비밀번호를 변경
				
				int cnt = 0;
				Connection conn = null;
				PreparedStatement psmt = null;
				
				// 0. 드라이버 파일을 프로젝트 안에 넣어주기
				try {
					// 1. 드라이버 설치 (동적로딩)
					// 왜 동적로딩인가
					// - 컴파일러는 아래의 코드를 만나기 전까지 어떠한 DBMS에 
					// 드라이벌르 사용하는지 모르고 아래의 코드를 만나는 순간
					// 해당 드라이버를 찾아서 설치를 한다.
					Class.forName("oracle.jdbc.driver.OracleDriver");
					
					// 2. 커넥션 열기
					// - DB가 존재하는 url, 아이디, 비밀번호
					String db_url = "jdbc:oracle:thin:@localhost:1521:xe";
					String db_id = "shopping";
					String db_pw = "12345";
					
					conn = DriverManager.getConnection(db_url, db_id, db_pw);
					
					if (conn != null) {
						System.out.println("DB연결 성공");
					} else {
						System.out.println("DB연결 실패");
					}
					
					System.out.print("비밀번호를 바꾸고 싶은 아이디 입력 >> ");
					String id = sc.next();
					
					System.out.print("비밀번호 재설정>> ");
					String newPw = sc.next();
					
					String sql = "UPDATE MEMBER SET PW = ? WHERE(ID = ?)";
					psmt = conn.prepareStatement(sql);
					
					// psmt객체가 sql문을 완성하고 실행할 수 있는 객체이다 
					psmt.setString(1, newPw);
					psmt.setString(2, id);
					
					// executeUpdate(); sql 문장을 실행하는 메소드
					// 실행한 문장의 개수를 int 형태로 반환
					cnt = psmt.executeUpdate();
					
				} catch (ClassNotFoundException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
					// OracleDriver라는 클래스가 없거나 ---> ojdbc.jar
					// 대소문자
					// id, pw
				} finally {
					// try가 잘 실행되거나
					// 또는 중간에 catch로 넘어간다고 하더라도
					// finally에는 마지막에 반드시 넘어오게 되어있다.
					// 4. 연결끊기
					// - 연결을 끊을때는 역순으로 끊어준다
					try {
						if (psmt != null) {
							psmt.close();
						}
						if (conn != null) {
							conn.close();
						}
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
				if (cnt > 0) {
						System.out.println("성공!");
					}else {
						System.out.println("실패");
					}
				
			}else if (menu == 5) {
				
				// 성공한다면 회원 탈퇴 완료
				
				int cnt = 0;
				Connection conn = null;
				PreparedStatement psmt = null;
				
				// 0. 드라이버 파일을 프로젝트 안에 넣어주기
				try {
					// 1. 드라이버 설치 (동적로딩)
					// 왜 동적로딩인가
					// - 컴파일러는 아래의 코드를 만나기 전까지 어떠한 DBMS에 
					// 드라이벌르 사용하는지 모르고 아래의 코드를 만나는 순간
					// 해당 드라이버를 찾아서 설치를 한다.
					Class.forName("oracle.jdbc.driver.OracleDriver");
					
					// 2. 커넥션 열기
					// - DB가 존재하는 url, 아이디, 비밀번호
					String db_url = "jdbc:oracle:thin:@localhost:1521:xe";
					String db_id = "shopping";
					String db_pw = "12345";
					
					conn = DriverManager.getConnection(db_url, db_id, db_pw);
					
					if (conn != null) {
						System.out.println("DB연결 성공");
					} else {
						System.out.println("DB연결 실패");
					}
					
					// 사용자에게서 아이디랑 비밀번호를 입력받아서
					// 해당 아이디와 비밀번호가 있으면 테이블에서 정보 삭제
					System.out.print("회원 탈퇴 아이디 >> ");
					String id = sc.next();
					System.out.print("회원 탈퇴 비밀번호 >> ");
					String pw = sc.next();
					
					String sql = "DELETE FROM MEMBER WHERE(ID = ? AND PW = ?)";
					psmt = conn.prepareStatement(sql);
					
					// psmt객체가 sql문을 완성하고 실행할 수 있는 객체이다 
					psmt.setString(1, id);
					psmt.setString(2, pw);
					
					// executeUpdate(); sql 문장을 실행하는 메소드
					// 실행한 문장의 개수를 int 형태로 반환
					cnt = psmt.executeUpdate();
					
				} catch (ClassNotFoundException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
					// OracleDriver라는 클래스가 없거나 ---> ojdbc.jar
					// 대소문자
					// id, pw
				} finally {
					// try가 잘 실행되거나
					// 또는 중간에 catch로 넘어간다고 하더라도
					// finally에는 마지막에 반드시 넘어오게 되어있다.
					// 4. 연결끊기
					// - 연결을 끊을때는 역순으로 끊어준다
					try {
						if (psmt != null) {
							psmt.close();
						}
						if (conn != null) {
							conn.close();
						}
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
				if (cnt > 0) 
						System.out.println("회원탈퇴완료!");
					
				else {
						System.out.println("실패");
					}			
				
			}else if (menu == 6) {
				System.out.println("프로그램을 종료합니다.");
				break;
			}else {
				System.out.println("정확한 숫자를 입력해주세요.");
			}
		}
		sc.close();
	}

}
