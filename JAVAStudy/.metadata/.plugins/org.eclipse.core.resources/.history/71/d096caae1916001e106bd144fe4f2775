package member;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;

public class test {
	int cnt = 0;
	Connection conn = null;
	PreparedStatement psmt = null;
	
	// 0. 드라이버 파일을 프로젝트 안에 넣어주기
	try {
		// 1. 드라이버 설치 (동적로딩)
		// 왜 동적로딩인가
		// - 컴파일러는 아래의 코드를 만나기 전까지 어떠한 DBMS에 
		// 드라이벌르 사용하는지 모르고 아래의 코드를 만나는 순간
		// 해당 드라이버를 찾아서 설치를 한다.
		Class.forName("oracle.jdbc.driver.OracleDriver");
		
		// 2. 커넥션 열기
		// - DB가 존재하는 url, 아이디, 비밀번호
		String db_url = "jdbc:oracle:thin:@localhost:1521:xe";
		String db_id = "shopping";
		String db_pw = "12345";
		
		conn = DriverManager.getConnection(db_url, db_id, db_pw);
		
		if (conn != null) {
			System.out.println("DB연결 성공");
		} else {
			System.out.println("DB연결 실패");
		}
		
		System.out.print("비밀번호를 바꾸고 싶은 아이디 입력 >> ");
		String id = sc.next();
		
		System.out.print("비밀번호 재설정>> ");
		String newPw = sc.next();
		
		String sql = "UPDATE MEMBER SET PW = ? WHERE(ID == ?)";
		psmt = conn.prepareStatement(sql);
		
		// psmt객체가 sql문을 완성하고 실행할 수 있는 객체이다 
		psmt.setString(1, newPw);
		psmt.setString(2, id);
		
		// executeUpdate(); sql 문장을 실행하는 메소드
		// 실행한 문장의 개수를 int 형태로 반환ㄴㄴㄴㄴ
		cnt = psmt.executeUpdate();
		
	} catch (ClassNotFoundException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	} catch (SQLException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	} finally {
		// try가 잘 실행되거나
		// 또는 중간에 catch로 넘어간다고 하더라도
		// finally에는 마지막에 반드시 넘어오게 되어있다.
		// 4. 연결끊기
		// - 연결을 끊을때는 역순으로 끊어준다
		try {
			if (psmt != null) {
				psmt.close();
			}
			if (conn != null) {
				conn.close();
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	if (cnt > 0) {
			System.out.println("회원가입 성공!");
		}else {
			System.out.println("회원가입 실패");
		}
	
}
